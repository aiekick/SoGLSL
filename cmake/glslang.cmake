if(${USE_SPIRV})
	include(FindPythonInterp)
	execute_process(
		COMMAND ${PYTHON_EXECUTABLE} update_glslang_sources.py
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glslang)
endif()
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(ENABLE_PCH ON CACHE BOOL "" FORCE)
set(ENABLE_CTEST OFF CACHE BOOL "" FORCE)
if(${USE_SPIRV})
	set(ENABLE_OPT ON CACHE BOOL "" FORCE)
	set(ENABLE_GLSLANG_BINARIES ON CACHE BOOL "" FORCE)
	set(ENABLE_SPVREMAPPER ON CACHE BOOL "" FORCE)
	set(BUILD_EXTERNAL ON CACHE BOOL "" FORCE)
	set(ENABLE_HLSL ON CACHE BOOL "" FORCE)
else()
	set(ENABLE_OPT OFF CACHE BOOL "" FORCE)
	set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "" FORCE)
	set(ENABLE_SPVREMAPPER OFF CACHE BOOL "" FORCE)
	set(BUILD_EXTERNAL OFF CACHE BOOL "" FORCE)
	set(ENABLE_HLSL OFF CACHE BOOL "" FORCE)
endif()
set(USE_CCACHE OFF CACHE BOOL "" FORCE)
set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "" FORCE)

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glslang)

if(glslang)
	set_target_properties(glslang PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(GenericCodeGen)
	set_target_properties(GenericCodeGen PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(MachineIndependent)
	set_target_properties(MachineIndependent PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(OGLCompiler)
	set_target_properties(OGLCompiler PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(OSDependent)
	set_target_properties(OSDependent PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(SPIRV)
	set_target_properties(SPIRV PROPERTIES FOLDER 3rdparty/glslang)
endif()
if(glslang-build-info)
	set_target_properties(glslang-build-info PROPERTIES FOLDER 3rdparty/glslang)
endif()


set(GLSLANG_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glslang)
if(${USE_SPIRV})
	set(GLSLANG_LIBRARIES glslang SPIRV)
else()
	set(GLSLANG_LIBRARIES glslang)
endif()